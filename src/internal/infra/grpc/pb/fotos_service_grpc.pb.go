// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/fotos_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FotosServiceClient is the client API for FotosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FotosServiceClient interface {
	GetFotos(ctx context.Context, in *GetFotosRequest, opts ...grpc.CallOption) (FotosService_GetFotosClient, error)
}

type fotosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFotosServiceClient(cc grpc.ClientConnInterface) FotosServiceClient {
	return &fotosServiceClient{cc}
}

func (c *fotosServiceClient) GetFotos(ctx context.Context, in *GetFotosRequest, opts ...grpc.CallOption) (FotosService_GetFotosClient, error) {
	stream, err := c.cc.NewStream(ctx, &FotosService_ServiceDesc.Streams[0], "/pb.FotosService/GetFotos", opts...)
	if err != nil {
		return nil, err
	}
	x := &fotosServiceGetFotosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FotosService_GetFotosClient interface {
	Recv() (*FotoResponse, error)
	grpc.ClientStream
}

type fotosServiceGetFotosClient struct {
	grpc.ClientStream
}

func (x *fotosServiceGetFotosClient) Recv() (*FotoResponse, error) {
	m := new(FotoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FotosServiceServer is the server API for FotosService service.
// All implementations must embed UnimplementedFotosServiceServer
// for forward compatibility
type FotosServiceServer interface {
	GetFotos(*GetFotosRequest, FotosService_GetFotosServer) error
	mustEmbedUnimplementedFotosServiceServer()
}

// UnimplementedFotosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFotosServiceServer struct {
}

func (UnimplementedFotosServiceServer) GetFotos(*GetFotosRequest, FotosService_GetFotosServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFotos not implemented")
}
func (UnimplementedFotosServiceServer) mustEmbedUnimplementedFotosServiceServer() {}

// UnsafeFotosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FotosServiceServer will
// result in compilation errors.
type UnsafeFotosServiceServer interface {
	mustEmbedUnimplementedFotosServiceServer()
}

func RegisterFotosServiceServer(s grpc.ServiceRegistrar, srv FotosServiceServer) {
	s.RegisterService(&FotosService_ServiceDesc, srv)
}

func _FotosService_GetFotos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFotosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FotosServiceServer).GetFotos(m, &fotosServiceGetFotosServer{stream})
}

type FotosService_GetFotosServer interface {
	Send(*FotoResponse) error
	grpc.ServerStream
}

type fotosServiceGetFotosServer struct {
	grpc.ServerStream
}

func (x *fotosServiceGetFotosServer) Send(m *FotoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FotosService_ServiceDesc is the grpc.ServiceDesc for FotosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FotosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FotosService",
	HandlerType: (*FotosServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFotos",
			Handler:       _FotosService_GetFotos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/fotos_service.proto",
}
