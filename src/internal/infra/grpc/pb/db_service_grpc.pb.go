// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/db_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbServiceClient is the client API for DbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbServiceClient interface {
	DropDb(ctx context.Context, in *DropDbRequest, opts ...grpc.CallOption) (*DropDbResponse, error)
	DbStatus(ctx context.Context, in *DbStatusRequest, opts ...grpc.CallOption) (*DbStatusResponse, error)
	PopulateIndex(ctx context.Context, in *PopulateIndexRequest, opts ...grpc.CallOption) (*PopulateIndexResponse, error)
	PopulateDb(ctx context.Context, in *PopulateDbRequest, opts ...grpc.CallOption) (DbService_PopulateDbClient, error)
	CancelPopulateDb(ctx context.Context, in *CancelPopulateDbRequest, opts ...grpc.CallOption) (*CancelPopulateDbResponse, error)
}

type dbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDbServiceClient(cc grpc.ClientConnInterface) DbServiceClient {
	return &dbServiceClient{cc}
}

func (c *dbServiceClient) DropDb(ctx context.Context, in *DropDbRequest, opts ...grpc.CallOption) (*DropDbResponse, error) {
	out := new(DropDbResponse)
	err := c.cc.Invoke(ctx, "/pb.DbService/DropDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) DbStatus(ctx context.Context, in *DbStatusRequest, opts ...grpc.CallOption) (*DbStatusResponse, error) {
	out := new(DbStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.DbService/DbStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) PopulateIndex(ctx context.Context, in *PopulateIndexRequest, opts ...grpc.CallOption) (*PopulateIndexResponse, error) {
	out := new(PopulateIndexResponse)
	err := c.cc.Invoke(ctx, "/pb.DbService/PopulateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbServiceClient) PopulateDb(ctx context.Context, in *PopulateDbRequest, opts ...grpc.CallOption) (DbService_PopulateDbClient, error) {
	stream, err := c.cc.NewStream(ctx, &DbService_ServiceDesc.Streams[0], "/pb.DbService/PopulateDb", opts...)
	if err != nil {
		return nil, err
	}
	x := &dbServicePopulateDbClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DbService_PopulateDbClient interface {
	Recv() (*DeputadoResponse, error)
	grpc.ClientStream
}

type dbServicePopulateDbClient struct {
	grpc.ClientStream
}

func (x *dbServicePopulateDbClient) Recv() (*DeputadoResponse, error) {
	m := new(DeputadoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dbServiceClient) CancelPopulateDb(ctx context.Context, in *CancelPopulateDbRequest, opts ...grpc.CallOption) (*CancelPopulateDbResponse, error) {
	out := new(CancelPopulateDbResponse)
	err := c.cc.Invoke(ctx, "/pb.DbService/CancelPopulateDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbServiceServer is the server API for DbService service.
// All implementations must embed UnimplementedDbServiceServer
// for forward compatibility
type DbServiceServer interface {
	DropDb(context.Context, *DropDbRequest) (*DropDbResponse, error)
	DbStatus(context.Context, *DbStatusRequest) (*DbStatusResponse, error)
	PopulateIndex(context.Context, *PopulateIndexRequest) (*PopulateIndexResponse, error)
	PopulateDb(*PopulateDbRequest, DbService_PopulateDbServer) error
	CancelPopulateDb(context.Context, *CancelPopulateDbRequest) (*CancelPopulateDbResponse, error)
	mustEmbedUnimplementedDbServiceServer()
}

// UnimplementedDbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDbServiceServer struct {
}

func (UnimplementedDbServiceServer) DropDb(context.Context, *DropDbRequest) (*DropDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDb not implemented")
}
func (UnimplementedDbServiceServer) DbStatus(context.Context, *DbStatusRequest) (*DbStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DbStatus not implemented")
}
func (UnimplementedDbServiceServer) PopulateIndex(context.Context, *PopulateIndexRequest) (*PopulateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateIndex not implemented")
}
func (UnimplementedDbServiceServer) PopulateDb(*PopulateDbRequest, DbService_PopulateDbServer) error {
	return status.Errorf(codes.Unimplemented, "method PopulateDb not implemented")
}
func (UnimplementedDbServiceServer) CancelPopulateDb(context.Context, *CancelPopulateDbRequest) (*CancelPopulateDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPopulateDb not implemented")
}
func (UnimplementedDbServiceServer) mustEmbedUnimplementedDbServiceServer() {}

// UnsafeDbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbServiceServer will
// result in compilation errors.
type UnsafeDbServiceServer interface {
	mustEmbedUnimplementedDbServiceServer()
}

func RegisterDbServiceServer(s grpc.ServiceRegistrar, srv DbServiceServer) {
	s.RegisterService(&DbService_ServiceDesc, srv)
}

func _DbService_DropDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).DropDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DbService/DropDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).DropDb(ctx, req.(*DropDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_DbStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).DbStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DbService/DbStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).DbStatus(ctx, req.(*DbStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_PopulateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopulateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).PopulateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DbService/PopulateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).PopulateIndex(ctx, req.(*PopulateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbService_PopulateDb_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PopulateDbRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DbServiceServer).PopulateDb(m, &dbServicePopulateDbServer{stream})
}

type DbService_PopulateDbServer interface {
	Send(*DeputadoResponse) error
	grpc.ServerStream
}

type dbServicePopulateDbServer struct {
	grpc.ServerStream
}

func (x *dbServicePopulateDbServer) Send(m *DeputadoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DbService_CancelPopulateDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPopulateDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbServiceServer).CancelPopulateDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DbService/CancelPopulateDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbServiceServer).CancelPopulateDb(ctx, req.(*CancelPopulateDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbService_ServiceDesc is the grpc.ServiceDesc for DbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DbService",
	HandlerType: (*DbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DropDb",
			Handler:    _DbService_DropDb_Handler,
		},
		{
			MethodName: "DbStatus",
			Handler:    _DbService_DbStatus_Handler,
		},
		{
			MethodName: "PopulateIndex",
			Handler:    _DbService_PopulateIndex_Handler,
		},
		{
			MethodName: "CancelPopulateDb",
			Handler:    _DbService_CancelPopulateDb_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PopulateDb",
			Handler:       _DbService_PopulateDb_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/db_service.proto",
}
